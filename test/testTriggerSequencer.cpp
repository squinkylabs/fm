
#include <set>
#include <string>
#include <vector>

//#include "GenerativeTriggerGenerator.h"
//#include "StochasticGrammar.h"
#include "TriggerSequencer.h"
//#include <random>
// 



/**************************************************************************************
 * Make some simple grammars and test them
 **************************************************************************************/
/*********************************************************************************************************
 * TriggerSequencer
 **********************************************************************************************************/

// test event at zero fires at zero
static void ts0() {
/* kockr:    TriggerSequencer::Event seq[] =
        {
            {TriggerSequencer::TRIGGER, 0},
            {TriggerSequencer::END, 100}
        };
    TriggerSequencer ts(seq);
    assert(!ts.getTrigger());

    ts.clock();
    assert(ts.getTrigger());

    ts.clock();
    assert(!ts.getTrigger());
*/}

// test trigger at 1 happens at 1
static void ts1() {
    /* kockr: TriggerSequencer::Event seq[] =
        {
            {TriggerSequencer::TRIGGER, 1},
            {TriggerSequencer::END, 0}};
    TriggerSequencer ts(seq);

    ts.clock();
    assert(!ts.getTrigger());

    ts.clock();
    assert(ts.getTrigger());

    ts.clock();
    assert(!ts.getTrigger());

    ts.clock();
    assert(!ts.getTrigger());
*/}

// 4 clock loop: delay 4, trigger, end
static void ts2() {
    /* kockr: TriggerSequencer::Event seq[] =
        {
            {TriggerSequencer::TRIGGER, 4},
            {TriggerSequencer::END, 0}};
    TriggerSequencer ts(seq);

    bool firstTime = true;
    // first time through, 4 clocks of nothing. then clock, 0,0,0
    for (int i = 0; i < 4; ++i) {
        ts.clock();
        if (firstTime) {
            assert(!ts.getTrigger());
            assert(!ts.getEnd());
            firstTime = false;
        } else {
            //printf("second time around, t=%d e=%d\n", ts.getTrigger(), ts.getEnd());

            // second time around we finally see the trigger

            assert(ts.getTrigger());

            // second time around, need to clock the end of the last time
            assert(ts.getEnd());
            ts.reset(seq);             // start it up again
            assert(!ts.getTrigger());  // resetting should not set us up for a trigger
        }
        ts.clock();
        assert(!ts.getTrigger());
        assert(!ts.getEnd());
        ts.clock();
        assert(!ts.getTrigger());
        assert(!ts.getEnd());

        ts.clock();
        assert(!ts.getTrigger());
        //	assert(ts.getEnd());

        //	ts.reset(seq);
    }*/
}

// test trigger seq qith
// 4 clock loop: trigger, delay 4 end
static void ts3() {
/* kockr:    TriggerSequencer::Event seq[] =
        {
            {TriggerSequencer::TRIGGER, 0},
            {TriggerSequencer::END, 4}};
    TriggerSequencer ts(seq);

    bool firstLoop = true;
    for (int i = 0; i < 4; ++i) {
        //printf("--- loop ----\n");

        // 1

        ts.clock();
        if (firstLoop) {
            assert(ts.getTrigger());
            // we just primed loop at top, so it's got a ways
            assert(!ts.getEnd());
            firstLoop = false;
        } else {
            // second time around, need to clock the end of the last time
            assert(ts.getEnd());
            ts.reset(seq);            // start it up again
            assert(ts.getTrigger());  // resetting should have set us up for a trigger
        }
        // 2
        ts.clock();
        assert(!ts.getTrigger());
        assert(!ts.getEnd());
        // 3
        ts.clock();
        assert(!ts.getTrigger());
        assert(!ts.getEnd());
        // 4
        ts.clock();
        assert(!ts.getTrigger());
        assert(!ts.getEnd());
    }
*/}

// test trigger seq with straight ahead 4/4 as generated by a grammar
static void ts4() {
/* kockr:    TriggerSequencer::Event seq[] =
        {
            {TriggerSequencer::TRIGGER, 0},
            {TriggerSequencer::TRIGGER, 4},
            {TriggerSequencer::TRIGGER, 4},
            {TriggerSequencer::TRIGGER, 4},
            {TriggerSequencer::END, 4}};
    TriggerSequencer ts(seq);

    //bool firstLoop = true;
    for (int i = 0; i < 100; ++i) {
        bool firstTime = (i == 0);
        // repeating pattern of trigg, no, no, no
        for (int j = 0; j < 4; ++j) {
            for (int k = 0; k < 4; ++k) {
                //	printf("test loop, i=%d, j=%d, k=%d\n", i, j, k);
                ts.clock();

                bool expectEnd = (k == 0) && (j == 0) && !firstTime;
                assert(ts.getEnd() == expectEnd);
                if (ts.getEnd()) {
                    ts.reset(seq);
                }
                assert(ts.getTrigger() == (k == 0));
            }
        }
    }
*/}



/********************************************************************************************
* GenerativeTriggerGenerator
**********************************************************************************************/

// test that we get some clocks and some not
#if 0
static void gtg0() {
    GKEY key = init1();
    GenerativeTriggerGenerator gtg(AudioMath::random(), rules, numRules, key);
    bool yes = false;
    bool no = false;
    for (int i = 0; i < 100000; ++i) {
        if (gtg.clock())
            yes = true;
        else
            no = true;

        if (yes && no) {
            //printf("clocked at %d\n", i);
            return;
        }
    }
    assert(false);
}

// test that we get everything in even quarter notes
static void gtg1() {
    GKEY key = init1();
    std::set<int> counts;

    GenerativeTriggerGenerator gtg(AudioMath::random(), rules, numRules, key);

    int ct = 0;
    for (int i = 0; i < 10000; ++i) {
        bool b = gtg.clock();
        if (b) {
            //printf("clocked at %d\n", ct);
            counts.insert(ct);
            ct = 0;
        }
        ct++;
    }
    //counts.insert(50);
    assert(!counts.empty());
    for (std::set<int>::iterator it = counts.begin(); it != counts.end(); ++it) {
        int c = *it;

        if ((c % PPQ) != 0) {
            //printf("PPQ=%d, c modePPQ =%d\n", PPQ, (c % PPQ));
            //printf("2ppq = %d, 4ppq=%d\n", 2 * PPQ, 4 * PPQ);
            assert(false);
        }
    }
}
#endif

void testTriggerSequencer() {
    ts0();
    ts1();
    ts2();
    ts3();
    ts4();

  
#if 0
    gtg0();
    gtg1();
#endif
}