
#include <stdio.h>
#include <assert.h>

bool _logvco = false;

#ifndef __PLUGIN        // This implementation only for testing. For real plugin we link VCV code.
namespace rack {
namespace dsp {

static const float minBlep16_16[512] = {
    0.000011, 0.000015, 0.000011, 0.000003, -0.000008, -0.000016, -0.000017, -0.000005, 
    0.000031, 0.000100, 0.000217, 0.000399, 0.000666, 0.001044, 0.001562, 0.002258, 
    0.003172, 0.004356, 0.005866, 0.007769, 0.010140, 0.013063, 0.016631, 0.020949, 
    0.026127, 0.032288, 0.039559, 0.048075, 0.057976, 0.069404, 0.082501, 0.097407, 
    0.114258, 0.133179, 0.154285, 0.177672, 0.203419, 0.231578, 0.262176, 0.295207, 
    0.330632, 0.368372, 0.408309, 0.450286, 0.494100, 0.539506, 0.586220, 0.633915, 
    0.682229, 0.730767, 0.779103, 0.826794, 0.873378, 0.918388, 0.961356, 1.001825, 
    1.039358, 1.073547, 1.104018, 1.130449, 1.152571, 1.170176, 1.183129, 1.191365, 
    1.194902, 1.193833, 1.188336, 1.178666, 1.165151, 1.148195, 1.128259, 1.105863, 
    1.081568, 1.055967, 1.029674, 1.003308, 0.977481, 0.952781, 0.929763, 0.908932, 
    0.890732, 0.875536, 0.863639, 0.855247, 0.850474, 0.849342, 0.851779, 0.857619, 
    0.866614, 0.878432, 0.892677, 0.908892, 0.926574, 0.945193, 0.964200, 0.983047, 
    1.001202, 1.018161, 1.033468, 1.046719, 1.057581, 1.065797, 1.071191, 1.073677, 
    1.073255, 1.070013, 1.064122, 1.055830, 1.045451, 1.033360, 1.019973, 1.005740, 
    0.991127, 0.976601, 0.962618, 0.949607, 0.937955, 0.928000, 0.920017, 0.914213, 
    0.910720, 0.909591, 0.910804, 0.914260, 0.919788, 0.927154, 0.936069, 0.946199, 
    0.957177, 0.968617, 0.980126, 0.991317, 1.001823, 1.011309, 1.019481, 1.026098, 
    1.030975, 1.033992, 1.035095, 1.034296, 1.031671, 1.027360, 1.021554, 1.014493, 
    1.006454, 0.997741, 0.988675, 0.979578, 0.970770, 0.962549, 0.955187, 0.948919, 
    0.943935, 0.940374, 0.938323, 0.937813, 0.938820, 0.941265, 0.945022, 0.949921, 
    0.955755, 0.962290, 0.969274, 0.976442, 0.983535, 0.990298, 0.996500, 1.001933, 
    1.006424, 1.009839, 1.012086, 1.013117, 1.012933, 1.011576, 1.009130, 1.005717, 
    1.001491, 0.996630, 0.991332, 0.985803, 0.980253, 0.974886, 0.969893, 0.965445, 
    0.961690, 0.958743, 0.956687, 0.955569, 0.955401, 0.956158, 0.957781, 0.960182, 
    0.963247, 0.966839, 0.970807, 0.974992, 0.979229, 0.983360, 0.987233, 0.990713, 
    0.993682, 0.996048, 0.997743, 0.998726, 0.998987, 0.998540, 0.997427, 0.995715, 
    0.993490, 0.990853, 0.987920, 0.984813, 0.981655, 0.978568, 0.975667, 0.973054, 
    0.970817, 0.969029, 0.967739, 0.966978, 0.966754, 0.967055, 0.967849, 0.969087, 
    0.970703, 0.972621, 0.974755, 0.977015, 0.979308, 0.981546, 0.983644, 0.985527, 
    0.987132, 0.988409, 0.989321, 0.989849, 0.989988, 0.989750, 0.989160, 0.988256, 
    0.987086, 0.985707, 0.984183, 0.982578, 0.980960, 0.979390, 0.977930, 0.976630, 
    0.975534, 0.974676, 0.974079, 0.973754, 0.973702, 0.973911, 0.974362, 0.975025, 
    0.975865, 0.976840, 0.977905, 0.979013, 0.980120, 0.981181, 0.982156, 0.983012, 
    0.983720, 0.984260, 0.984618, 0.984790, 0.984779, 0.984594, 0.984254, 0.983780, 
    0.983200, 0.982543, 0.981843, 0.981132, 0.980443, 0.979805, 0.979247, 0.978793, 
    0.978461, 0.978267, 0.978219, 0.978323, 0.978577, 0.978977, 0.979513, 0.980173, 
    0.980942, 0.981802, 0.982737, 0.983728, 0.984757, 0.985808, 0.986867, 0.987920, 
    0.988957, 0.989970, 0.990954, 0.991904, 0.992821, 0.993703, 0.994553, 0.995372, 
    0.996162, 0.996927, 0.997666, 0.998382, 0.999074, 0.999739, 1.000375, 1.000976, 
    1.001537, 1.002050, 1.002508, 1.002903, 1.003227, 1.003471, 1.003631, 1.003701, 
    1.003678, 1.003562, 1.003353, 1.003057, 1.002680, 1.002231, 1.001723, 1.001168, 
    1.000584, 0.999986, 0.999393, 0.998821, 0.998289, 0.997812, 0.997405, 0.997080, 
    0.996847, 0.996713, 0.996681, 0.996752, 0.996921, 0.997184, 0.997529, 0.997945, 
    0.998417, 0.998928, 0.999461, 0.999997, 1.000517, 1.001005, 1.001443, 1.001817, 
    1.002116, 1.002329, 1.002452, 1.002480, 1.002414, 1.002258, 1.002019, 1.001707, 
    1.001333, 1.000913, 1.000462, 0.999996, 0.999533, 0.999088, 0.998679, 0.998317, 
    0.998017, 0.997787, 0.997635, 0.997565, 0.997577, 0.997670, 0.997840, 0.998077, 
    0.998373, 0.998715, 0.999091, 0.999485, 0.999883, 1.000270, 1.000632, 1.000957, 
    1.001232, 1.001450, 1.001602, 1.001686, 1.001698, 1.001641, 1.001517, 1.001333, 
    1.001096, 1.000818, 1.000509, 1.000181, 0.999847, 0.999519, 0.999211, 0.998932, 
    0.998693, 0.998502, 0.998366, 0.998287, 0.998267, 0.998307, 0.998402, 0.998549, 
    0.998740, 0.998967, 0.999220, 0.999489, 0.999764, 1.000034, 1.000288, 1.000518, 
    1.000714, 1.000871, 1.000983, 1.001048, 1.001063, 1.001030, 1.000952, 1.000831, 
    1.000675, 1.000490, 1.000285, 1.000067, 0.999845, 0.999629, 0.999427, 0.999245, 
    0.999092, 0.998971, 0.998886, 0.998841, 0.998835, 0.998867, 0.998936, 0.999037, 
    0.999165, 0.999315, 0.999480, 0.999653, 0.999826, 0.999994, 1.000149, 1.000285, 
    1.000398, 1.000485, 1.000542, 1.000568, 1.000563, 1.000529, 1.000467, 1.000382, 
    1.000277, 1.000157, 1.000028, 0.999895, 0.999763, 0.999639, 0.999526, 0.999429, 
    0.999351, 0.999295, 0.999262, 0.999252, 0.999266, 0.999302, 0.999357, 0.999428, 
    0.999513, 0.999606, 0.999704, 0.999803, 0.999899, 0.999987, 1.000064, 1.000129, 
    1.000177, 1.000209, 1.000223, 1.000220, 1.000200, 1.000166, 1.000118, 1.000060, 
    0.999994, 0.999923, 0.999852, 0.999781, 0.999716, 0.999657, 0.999608, 0.999570, 
    0.999543, 0.999529, 0.999528, 0.999539, 0.999561, 0.999593, 0.999632, 0.999678, 
    0.999727, 0.999778, 0.999827, 0.999874, 0.999916, 0.999952, 0.999980, 1.000000

};

//void minBlepImpulse(int z, int o, float* output) {
void minBlepImpulse(int z, int o, float* output) {
    assert(z == 16);
    assert(o == 16);
    // std::memcpy(output, x, n * sizeof(float));
    for (int i=0; i<512; ++i) {
        output[i] = minBlep16_16[i];
    }
}
}
}
#endif

